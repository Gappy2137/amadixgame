//if (keyboard_check_pressed(ord("E"))) {show_inventory = !show_inventory;}
//if (keyboard_check_pressed(ord("R"))) {show_slots = !show_slots;}

if (!canUseInventory){exit;}
#region Operacje na przedmiotach
if (show_inventory) && (!show_slots){

	#region Pozycja myszki
	mousex = device_mouse_x_to_gui(0);
	mousey = device_mouse_y_to_gui(0);

	var cell_xoffset = (cell_size + x_offset)*scale;
	var cell_yoffset = (cell_size + y_offset)*scale;

	var i_mousex = mousex - slots_x;
	var i_mousey = mousey - slots_y;

	var numx = i_mousex div cell_xoffset;
	var numy = i_mousey div cell_yoffset;

	var endx = (gui_width - invUI_width)/2;
	var endUIx = xUI + invUI_width;

	var endy = (gui_height - invUI_height)/2;
	var endUIy = yUI + invUI_height + y_rel;

	if isbounded(mousex, xUI, endUIx) && isbounded(mousey, yUI + y_rel, endUIy){
		var sx = i_mousex - (numx * cell_xoffset);
		var sy = i_mousey - (numy * cell_yoffset);
	
		if ((sx < cell_size*scale) && (sy < cell_size*scale)){
			mouse_slotx = numx;
			mouse_sloty = numy;
		}
		selected_slot = min(inv_slots - 1 + (page * slots_onpage), mouse_slotx + (mouse_sloty * inv_slots_width) + (page * slots_onpage));
	
	}else{
		selected_slot = -1;
	}
	
	//////////////////////////////////////////////////////////////////////////
	//Zmiana strony
	if (mousex >= (xUI - 16)) && (mousex < (xUI - 16 + 14)) && (mousey >= (yUI + 70)) && (mousey <= (yUI + 70 + 25)){
		if (page > 0){
			if (mouse_check_button_pressed(mb_left)){
				page--;
			}
			if (picked_slot != -1){
				page--;	
			}
		}
	}
	if (mousex >= ((xUI + invUI_width))) && (mousex < ((xUI + invUI_width) + 16)) && (mousey >= (yUI + 70)) && (mousey <= (yUI + 70 + 25)){
		if (page < pages){
			if (mouse_check_button_pressed(mb_left)){
				page++;
			}
			if (picked_slot != -1){
				page++;	
			}
		}
	}
	
	if (mouse_wheel_up()){
		if (page > 0){
			page--;
		}
	}
	if (mouse_wheel_down()){
		if (page < pages){
			page++;
		}
	}
	//////////////////////////////////////////////////////////////////////////
	
	#endregion

	#region Armor
	var ar = 0;
	repeat(4){
		if isbounded(mousex, armor_x[ar], armor_x[ar] + 24) && isbounded(mousey, armor_y[ar], armor_y[ar] + 24){
			selected_slot = (inv_slots - 4) + ar;
		}
		ar++;
	}
	#endregion


	#region Operacje na przedmiotach
	var inv_grid = ds_inventory;

	function putitem(){
		var inv_grid = ds_inventory;
		inv_grid[# INVITEM, selected_slot] = inhand;
		inv_grid[# INVAMOUNT, selected_slot] = multipick;
		inv_grid[# INVTYPE, selected_slot] = ds_item_all[# INVTYPE, inhand];
		inv_grid[# MAXSTACK, selected_slot] = ds_item_all[# MAXSTACK, inhand];
		inv_grid[# INVHP, selected_slot] = ds_item_all[# INVHP, inhand];
		inv_grid[# INVSTAMINA, selected_slot] = ds_item_all[# INVSTAMINA, inhand];
		inv_grid[# INVLEVEL, selected_slot] = ds_item_all[# INVLEVEL, inhand];
		inv_grid[# INVDAMAGE, selected_slot] = ds_item_all[# INVDAMAGE, inhand];
		inv_grid[# INVDEFENCE, selected_slot] = ds_item_all[# INVDEFENCE, inhand];
		inv_grid[# INVEFFECTS, selected_slot] = ds_item_all[# INVEFFECTS, inhand];
		inv_grid[# INVTEMPERATURE, selected_slot] = ds_item_all[# INVTEMPERATURE, inhand];
				
		inhand = -1;
		multipick = 0;
	}
	function changeitem(){
		var inv_grid = ds_inventory;
		//Zamieniamy przedmioty w rece i slocie
		var temp0 = inv_grid[# INVITEM, selected_slot];
		var temp1 = inv_grid[# INVAMOUNT, selected_slot];
				
		inv_grid[# INVITEM, selected_slot] = inhand;
		inv_grid[# INVAMOUNT, selected_slot] = multipick;
		inv_grid[# INVTYPE, selected_slot] = ds_item_all[# INVTYPE, inhand];
		inv_grid[# MAXSTACK, selected_slot] = ds_item_all[# MAXSTACK, inhand];
		inv_grid[# INVHP, selected_slot] = ds_item_all[# INVHP, inhand];
		inv_grid[# INVSTAMINA, selected_slot] = ds_item_all[# INVSTAMINA, inhand];
		inv_grid[# INVLEVEL, selected_slot] = ds_item_all[# INVLEVEL, inhand];
		inv_grid[# INVDAMAGE, selected_slot] = ds_item_all[# INVDAMAGE, inhand];
		inv_grid[# INVDEFENCE, selected_slot] = ds_item_all[# INVDEFENCE, inhand];
		inv_grid[# INVEFFECTS, selected_slot] = ds_item_all[# INVEFFECTS, inhand];
		inv_grid[# INVTEMPERATURE, selected_slot] = ds_item_all[# INVTEMPERATURE, inhand];
				
		inhand = temp0;
		multipick = temp1;	
	}
	

	if ((mousex >= xUI) && (mousex < endUIx) && (mousey >= yUI + y_rel) && (mousey < endUIy))
	|| (isbounded(mousex, armor_x[0], armor_x[0] + 24) && (isbounded(mousey, armor_y[0], armor_y[1] + 24)))
	|| (isbounded(mousex, armor_x[2], armor_x[2] + 24) && (isbounded(mousey, armor_y[2], armor_y[3] + 24))){
		
		
		//Uzywanie shifta
		if (mouse_check_button_pressed(mb_left)) && (keyboard_check(vk_shift)){
				//Jezeli klikamy lewym na przedmiot typu czapka
				if (inhand == -1) && (inv_grid[# INVTYPE, selected_slot] == itemtype.hat) && (inv_grid[# INVITEM, (inv_slots - 4 + 0)] == item.none){
					//Wloz przedmiot na slot czapki
					var clothslot = (inv_slots - 4 + 0);
					inv_grid[# INVITEM, clothslot] = inv_grid[# INVITEM, selected_slot];
					inv_grid[# INVAMOUNT, clothslot] = 1;
					inv_grid[# INVTYPE, clothslot] = inv_grid[# INVTYPE, selected_slot];
					inv_grid[# MAXSTACK, clothslot] = inv_grid[# MAXSTACK, selected_slot];
					inv_grid[# INVHP, clothslot] = inv_grid[# INVHP, selected_slot];
					inv_grid[# INVSTAMINA, clothslot] = inv_grid[# INVSTAMINA, selected_slot];
					inv_grid[# INVLEVEL, clothslot] = inv_grid[# INVLEVEL, selected_slot];
					inv_grid[# INVDAMAGE, clothslot] = inv_grid[# INVDAMAGE, selected_slot];
					inv_grid[# INVDEFENCE, clothslot] = inv_grid[# INVDEFENCE, selected_slot];
					inv_grid[# INVEFFECTS, clothslot] = inv_grid[# INVEFFECTS, selected_slot];
					inv_grid[# INVTEMPERATURE, clothslot] = inv_grid[# INVTEMPERATURE, selected_slot];
					
					slot_remove(selected_slot);
				}
				//Jezeli klikamy lewym na przedmiot typu ubranie
				if (inhand == -1) && (inv_grid[# INVTYPE, selected_slot] == itemtype.clothing) && (inv_grid[# INVITEM, (inv_slots - 4 + 1)] == item.none){
					//Wloz przedmiot na slot ubrania
					var clothslot = (inv_slots - 4 + 1);
					inv_grid[# INVITEM, clothslot] = inv_grid[# INVITEM, selected_slot];
					inv_grid[# INVAMOUNT, clothslot] = 1;
					inv_grid[# INVTYPE, clothslot] = inv_grid[# INVTYPE, selected_slot];
					inv_grid[# MAXSTACK, clothslot] = inv_grid[# MAXSTACK, selected_slot];
					inv_grid[# INVHP, clothslot] = inv_grid[# INVHP, selected_slot];
					inv_grid[# INVSTAMINA, clothslot] = inv_grid[# INVSTAMINA, selected_slot];
					inv_grid[# INVLEVEL, clothslot] = inv_grid[# INVLEVEL, selected_slot];
					inv_grid[# INVDAMAGE, clothslot] = inv_grid[# INVDAMAGE, selected_slot];
					inv_grid[# INVDEFENCE, clothslot] = inv_grid[# INVDEFENCE, selected_slot];
					inv_grid[# INVEFFECTS, clothslot] = inv_grid[# INVEFFECTS, selected_slot];
					inv_grid[# INVTEMPERATURE, clothslot] = inv_grid[# INVTEMPERATURE, selected_slot];
					
					slot_remove(selected_slot);
				}
				//Jezeli klikamy lewym na przedmiot typu spodnie
				if (inhand == -1) && (inv_grid[# INVTYPE, selected_slot] == itemtype.pants) && (inv_grid[# INVITEM, (inv_slots - 4 + 2)] == item.none){
					//Wloz przedmiot na slot spodni
					var clothslot = (inv_slots - 4 + 2);
					inv_grid[# INVITEM, clothslot] = inv_grid[# INVITEM, selected_slot];
					inv_grid[# INVAMOUNT, clothslot] = 1;
					inv_grid[# INVTYPE, clothslot] = inv_grid[# INVTYPE, selected_slot];
					inv_grid[# MAXSTACK, clothslot] = inv_grid[# MAXSTACK, selected_slot];
					inv_grid[# INVHP, clothslot] = inv_grid[# INVHP, selected_slot];
					inv_grid[# INVSTAMINA, clothslot] = inv_grid[# INVSTAMINA, selected_slot];
					inv_grid[# INVLEVEL, clothslot] = inv_grid[# INVLEVEL, selected_slot];
					inv_grid[# INVDAMAGE, clothslot] = inv_grid[# INVDAMAGE, selected_slot];
					inv_grid[# INVDEFENCE, clothslot] = inv_grid[# INVDEFENCE, selected_slot];
					inv_grid[# INVEFFECTS, clothslot] = inv_grid[# INVEFFECTS, selected_slot];
					inv_grid[# INVTEMPERATURE, clothslot] = inv_grid[# INVTEMPERATURE, selected_slot];
					
					slot_remove(selected_slot);
				}
				//Jezeli klikamy lewym na przedmiot typu buty
				if (inhand == -1) && (inv_grid[# INVTYPE, selected_slot] == itemtype.boots) && (inv_grid[# INVITEM, (inv_slots - 4 + 3)] == item.none){
					//Wloz przedmiot na slot butow
					var clothslot = (inv_slots - 4 + 3);
					inv_grid[# INVITEM, clothslot] = inv_grid[# INVITEM, selected_slot];
					inv_grid[# INVAMOUNT, clothslot] = 1;
					inv_grid[# INVTYPE, clothslot] = inv_grid[# INVTYPE, selected_slot];
					inv_grid[# MAXSTACK, clothslot] = inv_grid[# MAXSTACK, selected_slot];
					inv_grid[# INVHP, clothslot] = inv_grid[# INVHP, selected_slot];
					inv_grid[# INVSTAMINA, clothslot] = inv_grid[# INVSTAMINA, selected_slot];
					inv_grid[# INVLEVEL, clothslot] = inv_grid[# INVLEVEL, selected_slot];
					inv_grid[# INVDAMAGE, clothslot] = inv_grid[# INVDAMAGE, selected_slot];
					inv_grid[# INVDEFENCE, clothslot] = inv_grid[# INVDEFENCE, selected_slot];
					inv_grid[# INVEFFECTS, clothslot] = inv_grid[# INVEFFECTS, selected_slot];
					inv_grid[# INVTEMPERATURE, clothslot] = inv_grid[# INVTEMPERATURE, selected_slot];
					
					slot_remove(selected_slot);
				}
		}
		
		//Branie przedmiotow lewym
		if (mouse_check_button_pressed(mb_left)) && !(keyboard_check(vk_shift)){
			//Jezeli nie mamy nic w rece i klikamy na slot z przedmiotem
			if (inhand == -1) && (inv_grid[# INVITEM, selected_slot] != item.none){
				//Od teraz trzymamy w rece przedmiot ze slotu
				inhand = inv_grid[# INVITEM, selected_slot];
				multipick = inv_grid[# INVAMOUNT, selected_slot];
				
				slot_remove(selected_slot);
			}else
			//Jezeli mamy przedmiot w rece i klikamy na pusty slot
			if (inhand != -1) && (inv_grid[# INVITEM, selected_slot] == item.none){
				//Jezeli kladziemy przedmiot specjalny na slot specjalny
				if (selected_slot == (inv_slots - 4) + 0){
					if (ds_item_all[# INVTYPE, inhand] == itemtype.hat){
						//Kladziemy przedmiot na slot
						putitem();
					}
				}else if (selected_slot == (inv_slots - 4) + 1){
					if (ds_item_all[# INVTYPE, inhand] == itemtype.clothing){
						//Kladziemy przedmiot na slot
						putitem();
					}
				}else if (selected_slot == (inv_slots - 4) + 2){
					if (ds_item_all[# INVTYPE, inhand] == itemtype.pants){
						//Kladziemy przedmiot na slot
						putitem();
					}
				}else if (selected_slot == (inv_slots - 4) + 3){
					if (ds_item_all[# INVTYPE, inhand] == itemtype.boots){
						//Kladziemy przedmiot na slot
						putitem();
					}
				}else{
					//Kladziemy przedmiot na slot
					putitem();
				}
			}else
			//Jezeli mamy przedmiot w rece i klikamy na slot z tym samym przedmiotem
			if (inhand != -1) && (inv_grid[# INVITEM, selected_slot] == inhand){
				//Jezeli ilosc przedmiotu ktory trzymamy jest taka ze gdy go polozymy to przekroczymy maxstack
				if (inv_grid[# INVAMOUNT, selected_slot] + multipick >= inv_grid[# MAXSTACK, selected_slot]){
					//Na slocie maxstack, w rece reszta
					var am = inv_grid[# INVAMOUNT, selected_slot];
					var am2 = multipick;
					inv_grid[# INVAMOUNT, selected_slot] = inv_grid[# MAXSTACK, selected_slot];
					inv_grid[# MAXSTACK, selected_slot] = ds_item_all[# MAXSTACK, inhand];
					inv_grid[# INVHP, selected_slot] = ds_item_all[# INVHP, inhand];
					inv_grid[# INVSTAMINA, selected_slot] = ds_item_all[# INVSTAMINA, inhand];
					inv_grid[# INVLEVEL, selected_slot] = ds_item_all[# INVLEVEL, inhand];
					inv_grid[# INVDAMAGE, selected_slot] = ds_item_all[# INVDAMAGE, inhand];
					inv_grid[# INVDEFENCE, selected_slot] = ds_item_all[# INVDEFENCE, inhand];
					inv_grid[# INVEFFECTS, selected_slot] = ds_item_all[# INVEFFECTS, inhand];
					inv_grid[# INVTEMPERATURE, selected_slot] = ds_item_all[# INVTEMPERATURE, inhand];
					multipick = am + am2 - inv_grid[# MAXSTACK, selected_slot];
				}else{
					//Jezeli ilosc przedmiotu jest mniejsza kladziemy normalnie
					inv_grid[# INVAMOUNT, selected_slot] += multipick;
					inv_grid[# INVTYPE, selected_slot] = ds_item_all[# INVTYPE, inhand];
					inv_grid[# MAXSTACK, selected_slot] = ds_item_all[# MAXSTACK, inhand];
					inv_grid[# INVHP, selected_slot] = ds_item_all[# INVHP, inhand];
					inv_grid[# INVSTAMINA, selected_slot] = ds_item_all[# INVSTAMINA, inhand];
					inv_grid[# INVLEVEL, selected_slot] = ds_item_all[# INVLEVEL, inhand];
					inv_grid[# INVDAMAGE, selected_slot] = ds_item_all[# INVDAMAGE, inhand];
					inv_grid[# INVDEFENCE, selected_slot] = ds_item_all[# INVDEFENCE, inhand];
					inv_grid[# INVEFFECTS, selected_slot] = ds_item_all[# INVEFFECTS, inhand];
					inv_grid[# INVTEMPERATURE, selected_slot] = ds_item_all[# INVTEMPERATURE, inhand];
					multipick = 0;
				}
			}else
			//Jezeli mamy przedmiot w rece i klikamy na slot z innym przedmiotem
			if (inhand != -1) && (inv_grid[# INVITEM, selected_slot] != inhand) && (inv_grid[# INVITEM, selected_slot] != item.none){
				//Jezeli kladziemy przedmiot specjalny na slot specjalny
				if (selected_slot == (inv_slots - 4) + 0){
					if (ds_item_all[# INVTYPE, inhand] == itemtype.hat){
						//Zamieniamy przedmioty w rece i slocie
						changeitem();
					}
				}else if (selected_slot == (inv_slots - 4) + 1){
					if (ds_item_all[# INVTYPE, inhand] == itemtype.clothing){
						//Zamieniamy przedmioty w rece i slocie
						changeitem();
					}
				}else if (selected_slot == (inv_slots - 4) + 2){
					if (ds_item_all[# INVTYPE, inhand] == itemtype.pants){
						//Zamieniamy przedmioty w rece i slocie
						changeitem();
					}
				}else if (selected_slot == (inv_slots - 4) + 3){
					if (ds_item_all[# INVTYPE, inhand] == itemtype.boots){
						//Zamieniamy przedmioty w rece i slocie
						changeitem();
					}
				}else{
					//Zamieniamy przedmioty w rece i slocie
					changeitem();
				}
			}
		}
		//Branie przedmiotow prawym
		if (mouse_check_button_pressed(mb_right)){
			//Jezeli klikamy prawym na przedmiot nie majac nic w rece
			if (inhand == -1) && (inv_grid[# INVITEM, selected_slot] != item.none) && (inv_grid[# INVAMOUNT, selected_slot] > 0) && (multipick < inv_grid[# MAXSTACK, selected_slot]){
				//Od teraz trzymamy w rece przedmiot ze slotu
				inhand = inv_grid[# INVITEM, selected_slot];
				if (keyboard_check(vk_shift)){
					multipick = floor((inv_grid[# INVAMOUNT, selected_slot])/2);
					inv_grid[# INVAMOUNT, selected_slot] -= multipick;
				}else{
					multipick++;
					inv_grid[# INVAMOUNT, selected_slot]--;
				}

			}else
			//Jezeli klikamy prawym na przedmiot majac w rece ten sam przedmiot
			if (inhand != -1) && (inv_grid[# INVITEM, selected_slot] == inhand) && (inv_grid[# INVAMOUNT, selected_slot] > 0) && (multipick < inv_grid[# MAXSTACK, selected_slot]){
				inhand = inv_grid[# INVITEM, selected_slot];
				
				if (keyboard_check(vk_shift)){
					if (inv_grid[# INVAMOUNT, selected_slot] == 1){
						multipick++;
						slot_remove(selected_slot);
					}else{
						var mm = floor((inv_grid[# INVAMOUNT, selected_slot])/2);
						if (multipick + mm >= inv_grid[# MAXSTACK, selected_slot]){
							var mi = (inv_grid[# MAXSTACK, selected_slot] - multipick);
							inv_grid[# INVAMOUNT, selected_slot] -= mi;
							multipick = inv_grid[# MAXSTACK, selected_slot];
						}else{
							multipick += mm;
							inv_grid[# INVAMOUNT, selected_slot] -= mm;
						}	
					}
				}else{
					multipick++;
					inv_grid[# INVAMOUNT, selected_slot]--;
				}
			}
		}
		

		
	}else{
		//Jezeli myszka jest poza ekranem ekwipunku
		if (selected_slot == -1){
			if (mouse_check_button_pressed(mb_left)){
				//Jezeli trzymasz cos w rece wyrzuc to
				if (inhand != -1){
					var inst = instance_create_layer(obj_amadix.x, obj_amadix.y, "Instances", obj_item);
					with (inst){
						item_num = other.inhand;
						item_num_amount = other.multipick;
						x_frame = item_num mod (spr_width/cell_size);
						y_frame = item_num div (spr_width/cell_size);
					}
					inhand = -1;
					multipick = 0;
				}
			}
		}
	}
	#endregion

	
	//Jezeli istnieje w siatce przedmiot o ilosci zerowej usun go
	for (var i = 0; i < inv_slots; ++i){
	    if ((inv_grid[# INVAMOUNT, i] == 0) && (inv_grid[# INVITEM, i] != item.none)){
				slot_remove(i);
		}
	}
	
	if (inhand == -1){
		multipick = 0;	
	}
	if (multipick == 0){
		inhand = -1;	
	}
}
else if (!show_inventory) && (show_slots){
	

	if (instance_exists(obj_amadix)){
		if (obj_amadix.y > (room_height - 132)){
			slots_position_up = true;
		}else{
			slots_position_up = false;	
		}
	}
	
	#region Pozycja myszki
	
	if (slots_position_up){
		var pos = 12;
	}else{
		var pos = 237;
	}
	
	mousex = device_mouse_x_to_gui(0);
	mousey = device_mouse_y_to_gui(0);

	var cell_xoffset = (cell_size + x_offset)*scale;
	var cell_yoffset = (cell_size + y_offset)*scale;

	var i_mousex = mousex - slots_x;
	var i_mousey = mousey - pos;

	var numx = i_mousex div cell_xoffset;
	var numy = i_mousey div cell_yoffset;

	var endx = (gui_width - invUI_width)/2;
	var endUIx = invUI_width + endx;

	var endy = pos;
	var endUIy = cell_size + endy;

	if (mousex >= xUI) && (mousex < endUIx) && (mousey >= pos) && (mousey < endUIy){
		var sx = i_mousex - (numx * cell_xoffset);
		var sy = i_mousey - (numy * cell_yoffset);
		inslots = true;
	
		if ((sx < cell_size*scale) && (sy < cell_size*scale)){
			mouse_slotx = numx;
			mouse_sloty = numy;
		}
		
		if (mouse_check_button_pressed(mb_left)) && (obj_amadix.actionstate == player_state_action.none){
			show_slots_mouse = true;
			mouse_slotx_fix = false;
			text_timer = 300;
			text_alpha = 1;
			mouse_slotx_second = mouse_slotx;
			selected_slot = mouse_slotx_second;
		}
	
	}else{
		selected_slot = -1;
		inslots = false;
	}
	
	if instance_exists(obj_amadix){
		if (obj_amadix.actionstate == player_state_action.none){
			if (mouse_wheel_down()){
				mouse_slotx_second ++;	
				if (mouse_slotx_second > 11){
					mouse_slotx_second = 0;	
				}
				show_slots_mouse = true;
				mouse_slotx_fix = false;
				text_timer = 300;
				text_alpha = 1;
			}
			if (mouse_wheel_up()){
				mouse_slotx_second --;	
				if (mouse_slotx_second < 0){
					mouse_slotx_second = 11;	
				}
				show_slots_mouse = true;
				mouse_slotx_fix = false;
				text_timer = 300;
				text_alpha = 1;
			}
		}
	}
	if (show_slots_mouse) && (!mouse_slotx_fix){
		selected_slot = mouse_slotx_second;
	}
	#region Klawisze
	if instance_exists(obj_amadix){
		if (obj_amadix.actionstate == player_state_action.none){
			if (keyboard_check_pressed(ord("1"))){mouse_slotx_second = 0;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("2"))){mouse_slotx_second = 1;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("3"))){mouse_slotx_second = 2;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("4"))){mouse_slotx_second = 3;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("5"))){mouse_slotx_second = 4;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("6"))){mouse_slotx_second = 5;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("7"))){mouse_slotx_second = 6;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("8"))){mouse_slotx_second = 7;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("9"))){mouse_slotx_second = 8;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(ord("0"))){mouse_slotx_second = 9;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(189)){mouse_slotx_second = 10;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
			if (keyboard_check_pressed(187)){mouse_slotx_second = 11;selected_slot = mouse_slotx_second;show_slots_mouse = true;mouse_slotx_fix = false;text_timer = 300;text_alpha = 1;}
		}
	}
	#endregion
	
	//Operacje na przedmiotach w slocie (jedzenie, atak)
	item_action();
	
	//Jezeli istnieje w siatce przedmiot o ilosci zerowej usun go
	for (var i = 0; i < inv_slots_width; ++i) {
	    if (ds_inventory[# 1, i] == 0) && (multipick == 0){
				slot_remove(i);
		}
	}
	
	#endregion	
}
else if (!show_inventory) && (!show_slots){
	exit;
}
#endregion

//Logika ubran i akcesoriow
global.playerHat = (ds_inventory[# INVITEM, ((inv_slots - 4) + 0)]);
global.playerTorso = (ds_inventory[# INVITEM, ((inv_slots - 4) + 1)]);
global.playerLegs = (ds_inventory[# INVITEM, ((inv_slots - 4) + 2)]);
global.playerBoots = (ds_inventory[# INVITEM, ((inv_slots - 4) + 3)]);








///@description scr_setPlayerFacingAnim(facing)
function scr_setPlayerFacingAnim(facing){

#region Glowa
	if (!running){
		switch(actionstate){
				case player_state_action.eating:
					head_index = spr_amadix_head_eating;
				break;
				case player_state_action.drinking:
					head_index = spr_amadix_head_drinking;
				break;
				case player_state_action.attacking_melee:
					if facing == index_facing.right
						head_index = spr_amadix_head_attack_r;
					if facing == index_facing.up
						head_index = spr_amadix_head_attack_u;
					if facing == index_facing.left
						head_index = spr_amadix_head_attack_l;
					if facing == index_facing.down
						head_index = spr_amadix_head_attack_d;
				break;
				case player_state_action.handgun:
					if facing == index_facing.right
						head_index = spr_amadix_head_r;
					if facing == index_facing.up
						head_index = spr_amadix_head_u;
					if facing == index_facing.left
						head_index = spr_amadix_head_l;
					if facing == index_facing.down
						head_index = spr_amadix_head_d;
				break;
				case player_state_action.none:
					if facing == index_facing.right
						head_index = spr_amadix_head_r;
					if facing == index_facing.up
						head_index = spr_amadix_head_u;
					if facing == index_facing.left
						head_index = spr_amadix_head_l;
					if facing == index_facing.down
						head_index = spr_amadix_head_d;
				break;
			}
		}else{
				if facing == index_facing.right
					head_index = spr_amadix_head_run_r;
				if facing == index_facing.up
					head_index = spr_amadix_head_run_u;
				if facing == index_facing.left
					head_index = spr_amadix_head_run_l;
				if facing == index_facing.down
					head_index = spr_amadix_head_run_d;
	}
#endregion

#region Dlonie
	if (global.playerHands == "short"){
		if (!running){
			switch(actionstate){
				case player_state_action.eating:
					hands_index = spr_amadix_hands_eating;
				break;
				case player_state_action.drinking:
					hands_index = spr_amadix_hands_drinking;
				break;
				case player_state_action.attacking_melee:
					if facing == index_facing.right
						hands_index = spr_amadix_hands_attack_r;
					if facing == index_facing.up
						hands_index = spr_amadix_hands_attack_u;
					if facing == index_facing.left
						hands_index = spr_amadix_hands_attack_l;
					if facing == index_facing.down
						hands_index = spr_amadix_hands_attack_d;
				break;
				case player_state_action.handgun:
				
					if isLooking(index_facing.up){
						if (instance_exists(obj_gun_logic)){
							switch(itemeaten){
								case item.m1911:
								
									hand_rot = point_direction(x, y + hand_yoffset, mouse_x, mouse_y) - 90;
									hand_xoffset = 0;
									hand_yoffset = 18;
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											hands_index = spr_amadix_hands_gun_u;
										break;
										case gunState.shooting:
											hands_index = spr_amadix_hands_gun_u_shoot;
										break;
										case gunState.reloading:
											hands_index = spr_amadix_hands_gun_u_reload;
										case gunState.reloading_empty:
											hands_index = spr_amadix_hands_gun_u_reload;
										break;
										case gunState.empty:
											hands_index = spr_amadix_hands_gun_u;
										break;
									}
									
								break;
								case item.sawedoff:
								
									hand_rot = point_direction(x, y + hand_yoffset, mouse_x, mouse_y) - 90;
									hand_xoffset = 0;
									hand_yoffset = 18;
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											hands_index = spr_amadix_hands_sawedoff_u;
										break;
										case gunState.shooting:
											hands_index = spr_amadix_hands_sawedoff_u_shoot;
										break;
										case gunState.reloading:
											hands_index = spr_amadix_hands_sawedoff_u_reload;
										case gunState.reloading_empty:
											hands_index = spr_amadix_hands_sawedoff_u_reload;
										break;
										case gunState.empty:
											hands_index = spr_amadix_hands_sawedoff_u;
										break;
									}
									
								break;
							}
						}
					}else
					if isLooking(index_facing.left){
						if (instance_exists(obj_gun_logic)){
							switch(itemeaten){
								case item.m1911:
								
									hand_rot = point_direction(x, y + hand_yoffset, mouse_x, mouse_y) - 180;
									hand_xoffset = 3;
									hand_yoffset = 17;
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											hands_index = spr_amadix_hands_gun_l;
										break;
										case gunState.shooting:
											hands_index = spr_amadix_hands_gun_l_shoot;
										break;
										case gunState.reloading:
											hands_index = spr_amadix_hands_gun_l_reload;
										case gunState.reloading_empty:
											hands_index = spr_amadix_hands_gun_l_reload;
										break;
										case gunState.empty:
											hands_index = spr_amadix_hands_gun_l;
										break;
									}
									
								break;
								case item.sawedoff:
								
									hand_rot = point_direction(x, y + hand_yoffset, mouse_x, mouse_y) - 180;
									hand_xoffset = 3;
									hand_yoffset = 16;
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											hands_index = spr_amadix_hands_sawedoff_l;
										break;
										case gunState.shooting:
											hands_index = spr_amadix_hands_sawedoff_l_shoot;
										break;
										case gunState.reloading:
											hands_index = spr_amadix_hands_sawedoff_l_reload;
										case gunState.reloading_empty:
											hands_index = spr_amadix_hands_sawedoff_l_reload;
										break;
										case gunState.empty:
											hands_index = spr_amadix_hands_sawedoff_l;
										break;
									}
									
								break;
							}
						}

						
					}else
					if isLooking(index_facing.down){
						
						if (instance_exists(obj_gun_logic)){
							switch(itemeaten){
								case item.m1911:
								
									hand_rot = point_direction(x, y + hand_yoffset, mouse_x, mouse_y) + 90;
									hand_xoffset = -3;
									hand_yoffset = 14;
									hand_xoffset2 = 3;
									hand_yoffset2 = 14;
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											hands_index = spr_amadix_hands_gun_d;
											hands2_index = spr_amadix_hands_gun_d2;
										break;
										case gunState.shooting:
											hands_index = spr_amadix_hands_gun_d_shoot;
											hands2_index = spr_amadix_hands_gun_d2_shoot;
										break;
										case gunState.reloading:
											hands_index = spr_amadix_hands_gun_d_reload;
										case gunState.reloading_empty:
											hands_index = spr_amadix_hands_gun_d_reload;
										break;
										case gunState.empty:
											hands_index = spr_amadix_hands_gun_d;
											hands2_index = spr_amadix_hands_gun_d2;
										break;
									}
									
								break;
								case item.sawedoff:
								
									hand_rot = point_direction(x, y + hand_yoffset, mouse_x, mouse_y) + 90;
									hand_xoffset = -3;
									hand_yoffset = 14;
									hand_xoffset2 = 3;
									hand_yoffset2 = 14;
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											hands_index = spr_amadix_hands_sawedoff_d;
											hands2_index = spr_amadix_hands_sawedoff_d2;
										break;
										case gunState.shooting:
											hands_index = spr_amadix_hands_sawedoff_d_shoot;
											hands2_index = spr_amadix_hands_sawedoff_d2_shoot;
										break;
										case gunState.reloading:
											hands_index = spr_amadix_hands_sawedoff_d_reload;
										case gunState.reloading_empty:
											hands_index = spr_amadix_hands_sawedoff_d_reload;
										break;
										case gunState.empty:
											hands_index = spr_amadix_hands_sawedoff_d;
											hands2_index = spr_amadix_hands_sawedoff_d2;
										break;
									}
									
								break;
							}
						}
						
					}else{
						
						if (instance_exists(obj_gun_logic)){
							switch(itemeaten){
								case item.m1911:
								
									hand_rot = point_direction(x, y + hand_yoffset, mouse_x, mouse_y);
									hand_xoffset = -3;
									hand_yoffset = 17;
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											hands_index = spr_amadix_hands_gun_r;
										break;
										case gunState.shooting:
											hands_index = spr_amadix_hands_gun_r_shoot;
										break;
										case gunState.reloading:
											hands_index = spr_amadix_hands_gun_r_reload;
										case gunState.reloading_empty:
											hands_index = spr_amadix_hands_gun_r_reload;
										break;
										case gunState.empty:
											hands_index = spr_amadix_hands_gun_r;
										break;
									}
									
								break;
								case item.sawedoff:
								
									hand_rot = point_direction(x, y + hand_yoffset, mouse_x, mouse_y);
									hand_xoffset = -5;
									hand_yoffset = 19;
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											hands_index = spr_amadix_hands_sawedoff_r;
										break;
										case gunState.shooting:
											hands_index = spr_amadix_hands_sawedoff_r_shoot;
										break;
										case gunState.reloading:
											hands_index = spr_amadix_hands_sawedoff_r_reload;
										case gunState.reloading_empty:
											hands_index = spr_amadix_hands_sawedoff_r_reload;
										break;
										case gunState.empty:
											hands_index = spr_amadix_hands_sawedoff_r;
										break;
									}
									
								break;
							}
						}
					}
				break;
				case player_state_action.none:
					switch(facing){
						case index_facing.down:
							hands_index = spr_amadix_hands_d;
						break;
						case index_facing.left:
							hands_index = spr_amadix_hands_l;
						break;
						case index_facing.right:
							hands_index = spr_amadix_hands_r;
						break;
						case index_facing.up:
							hands_index = spr_amadix_hands_u;
						break;
					}
				break;
			}
		}else{
			switch(facing){
				case index_facing.down:
					hands_index = spr_amadix_hands_run_d;
				break;
				case index_facing.left:
					hands_index = spr_amadix_hands_run_l;
				break;
				case index_facing.right:
					hands_index = spr_amadix_hands_run_r;
				break;
				case index_facing.up:
					hands_index = spr_amadix_hands_run_u;
						
			}
		}
	}
	if (global.playerHands == "long"){
		if (actionstate == player_state_action.eating){
			hands_index = spr_amadix_longhands_eating;
		}else if (actionstate == player_state_action.drinking){
			hands_index = spr_amadix_longhands_eating;
		}else{
			if facing == index_facing.right
				hands_index = spr_amadix_longhands_r;
			if facing == index_facing.up
				hands_index = spr_amadix_longhands_u;
			if facing == index_facing.left
				hands_index = spr_amadix_longhands_l;
			if facing == index_facing.down
				hands_index = spr_amadix_longhands_d;
		}
	}
#endregion

#region Czapka
	switch(global.playerHat){
		case item.none:
			hat_index = spr_item_none;
		break;
		case item.panama_hat:
			hat_index = spr_panama_hat;
			switch(facing){
				case index_facing.down:
					hat_frame = 0;
				break;
				case index_facing.left:
					hat_frame = 1;
				break;
				case index_facing.right:
					hat_frame = 2;
				break;
				case index_facing.up:
					hat_frame = 3;
				break;
			}
		break;
	}
#endregion

#region Bron

if (instance_exists(obj_gun_logic)){
switch(itemeaten){
	case item.none:
		gun_index = spr_item_none;
	break;
	#region 1911
	case item.m1911:
		switch(obj_gun_logic.state){
			case gunState.standby:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_m1911_u;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_m1911_d;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_m1911_l;
					}else{
						gun_index = spr_amadix_m1911_r;
					}
			break;
			case gunState.shooting:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_m1911_u_shoot;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_m1911_d_shoot;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_m1911_l_shoot;
					}else{
						gun_index = spr_amadix_m1911_r_shoot;
					}
			break;
			case gunState.reloading:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_m1911_u_reload;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_m1911_d_reload;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_m1911_l_reload;
					}else{
						gun_index = spr_amadix_m1911_r_reload;
					}
			break;
			case gunState.reloading_empty:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_m1911_u_reload_empty;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_m1911_d_reload_empty;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_m1911_l_reload_empty;
					}else{
						gun_index = spr_amadix_m1911_r_reload_empty;
					}
			break;
			case gunState.empty:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_m1911_u_empty;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_m1911_d_empty;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_m1911_l_empty;
					}else{
						gun_index = spr_amadix_m1911_r_empty;
					}
			break;
		}

	break;
	#endregion
	
	#region sawed off
	case item.sawedoff:
		switch(obj_gun_logic.state){
			case gunState.standby:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_sawedoff_u;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_sawedoff_d;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_sawedoff_l;
					}else{
						gun_index = spr_amadix_sawedoff_r;
					}
			break;
			case gunState.shooting:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_sawedoff_u_shoot;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_sawedoff_d_shoot;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_sawedoff_l_shoot;
					}else{
						gun_index = spr_amadix_sawedoff_r_shoot;
					}
			break;
			case gunState.reloading:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_sawedoff_u_reload;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_sawedoff_d_reload;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_sawedoff_l_reload;
					}else{
						gun_index = spr_amadix_sawedoff_r_reload;
					}
			break;
			case gunState.reloading_empty:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_sawedoff_u_reload;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_sawedoff_d_reload;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_sawedoff_l_reload;
					}else{
						gun_index = spr_amadix_sawedoff_r_reload;
					}
			break;
			case gunState.empty:
					if isLooking(index_facing.up){
						gun_index = spr_amadix_sawedoff_u;
					}else if isLooking(index_facing.down){
						gun_index = spr_amadix_sawedoff_d;
					}else if isLooking(index_facing.left){
						gun_index = spr_amadix_sawedoff_l;
					}else{
						gun_index = spr_amadix_sawedoff_r;
					}
			break;
		}
	#endregion
	
	
	break;
	
}
}
#endregion

switch(global.playerTorso){
	case item.none:
			switch(actionstate){
				//eating--------------------------------------------------------
				case player_state_action.eating:
					torso_index = spr_amadix_bareTC_eating;
				break;
				//--------------------------------------------------------------
				
				//drinking------------------------------------------------------
				case player_state_action.drinking:
					torso_index = spr_amadix_bareTC_drinking;
				break;
				//--------------------------------------------------------------
				
				//attacking-----------------------------------------------------
				case player_state_action.attacking_melee:
					switch(facing){
						case index_facing.down:
							torso_index = spr_amadix_bareTC_attack_d;
						break;
						case index_facing.left:
							torso_index = spr_amadix_bareTC_attack_l;
						break;
						case index_facing.right:
							torso_index = spr_amadix_bareTC_attack_r;
						break;
						case index_facing.up:
							torso_index = spr_amadix_bareTC_attack_u;
						break;
					}
				break;
				//--------------------------------------------------------------
				
				
				//none----------------------------------------------------------
				case player_state_action.none:
					switch(state){
						//idle-----------------------------------------------------------
						case player_state.idle:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_bareTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_bareTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_bareTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_bareTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//moving--------------------------------------------------------
						case player_state.moving:
								switch(facing){
									case index_facing.down:
										if (!running){
											torso_index = spr_amadix_bareTC_d;
										}else{
											torso_index = spr_amadix_bareTC_run_d;
										}
									break;
									case index_facing.left:
										if (!running){
											torso_index = spr_amadix_bareTC_l;
										}else{
											torso_index = spr_amadix_bareTC_run_l;
										}
									break;
									case index_facing.right:
										if (!running){
											torso_index = spr_amadix_bareTC_r;
										}else{
											torso_index = spr_amadix_bareTC_run_r;
										}
									break;
									case index_facing.up:
										if (!running){
											torso_index = spr_amadix_bareTC_u;
										}else{
											torso_index = spr_amadix_bareTC_run_u;
										}
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading--------------------------------------------------------
						case player_state.wading:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_bareTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_bareTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_bareTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_bareTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading.idle---------------------------------------------------
						case player_state.wading_idle:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_bareTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_bareTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_bareTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_bareTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming------------------------------------------------------
						case player_state.swimming:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_bareTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_bareTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_bareTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_bareTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming.idle-------------------------------------------------
						case player_state.swimming_idle:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_bareTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_bareTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_bareTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_bareTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
					}
				break;
				//--------------------------------------------------------------
				
			}

	break;
	
	case item.classic_jacket:
	
			switch(actionstate){
				//eating--------------------------------------------------------
				case player_state_action.eating:
					torso_index = spr_amadix_newTC_eating;
				break;
				//--------------------------------------------------------------
				
				//drinking------------------------------------------------------
				case player_state_action.drinking:
					torso_index = spr_amadix_newTC_drinking;
				break;
				//--------------------------------------------------------------
				
				//attacking-----------------------------------------------------
				case player_state_action.attacking_melee:
					switch(facing){
						case index_facing.down:
							torso_index = spr_amadix_newTC_attack_d;
						break;
						case index_facing.left:
							torso_index = spr_amadix_newTC_attack_l;
						break;
						case index_facing.right:
							torso_index = spr_amadix_newTC_attack_r;
						break;
						case index_facing.up:
							torso_index = spr_amadix_newTC_attack_u;
						break;
					}
				break;
				//--------------------------------------------------------------
				
				//handgun-----------------------------------------------------
				case player_state_action.handgun:
					switch(facing){
						case index_facing.down:
							torso_index = spr_amadix_newTC_gun_d;
						break;
						case index_facing.left:
							torso_index = spr_amadix_newTC_gun_l;
						break;
						case index_facing.right:
							torso_index = spr_amadix_newTC_gun_r;
						break;
						case index_facing.up:
							torso_index = spr_amadix_newTC_gun_u;
						break;
					}
					
				
					
					if isLooking(index_facing.up){
						if (instance_exists(obj_gun_logic)){
							switch(itemeaten){
								case item.m1911:
									switch(obj_gun_logic.state){
										case gunState.standby:
											arms_index = spr_amadix_newA_gun_u;
										break;
										case gunState.shooting:
											arms_index = spr_amadix_newA_gun_u_shoot;
										break;
										case gunState.reloading:
											arms_index = spr_amadix_newA_gun_u_reload;
										case gunState.reloading_empty:
											arms_index = spr_amadix_newA_gun_u_reload;
										break;
										case gunState.empty:
											arms_index = spr_amadix_newA_gun_u;
										break;
									}
									
								break;
								
								case item.sawedoff:
									switch(obj_gun_logic.state){
										case gunState.standby:
											arms_index = spr_amadix_newA_sawedoff_u;
										break;
										case gunState.shooting:
											arms_index = spr_amadix_newA_sawedoff_u_shoot;
										break;
										case gunState.reloading:
											arms_index = spr_amadix_newA_sawedoff_u_reload;
										case gunState.reloading_empty:
											arms_index = spr_amadix_newA_sawedoff_u_reload;
										break;
										case gunState.empty:
											arms_index = spr_amadix_newA_sawedoff_u;
										break;
									}
									
								break;
							}
						}
					}else
					if isLooking(index_facing.left){
						if (instance_exists(obj_gun_logic)){
							switch(itemeaten){
								case item.m1911:
									switch(obj_gun_logic.state){
										case gunState.standby:
											arms_index = spr_amadix_newA_gun_l;
										break;
										case gunState.shooting:
											arms_index = spr_amadix_newA_gun_l_shoot;
										break;
										case gunState.reloading:
											arms_index = spr_amadix_newA_gun_l_reload;
										case gunState.reloading_empty:
											arms_index = spr_amadix_newA_gun_l_reload;
										break;
										case gunState.empty:
											arms_index = spr_amadix_newA_gun_l;
										break;
									}
									
								break;
								
								case item.sawedoff:
									switch(obj_gun_logic.state){
										case gunState.standby:
											arms_index = spr_amadix_newA_sawedoff_l;
										break;
										case gunState.shooting:
											arms_index = spr_amadix_newA_sawedoff_l_shoot;
										break;
										case gunState.reloading:
											arms_index = spr_amadix_newA_sawedoff_l_reload;
										case gunState.reloading_empty:
											arms_index = spr_amadix_newA_sawedoff_l_reload;
										break;
										case gunState.empty:
											arms_index = spr_amadix_newA_sawedoff_l;
										break;
									}
									
								break;
							}
						}

						
					}else
					if isLooking(index_facing.down){
						
						if (instance_exists(obj_gun_logic)){
							switch(itemeaten){
								case item.m1911:
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											arms_index = spr_amadix_newA_gun_d;
											arms2_index = spr_amadix_newA_gun_d2;
										break;
										case gunState.shooting:
											arms_index = spr_amadix_newA_gun_d_shoot;
											arms2_index = spr_amadix_newA_gun_d2_shoot;
										break;
										case gunState.reloading:
											arms_index = spr_amadix_newA_gun_d_reload;
										case gunState.reloading_empty:
											arms_index = spr_amadix_newA_gun_d_reload;
										break;
										case gunState.empty:
											arms_index = spr_amadix_newA_gun_d;
											arms2_index = spr_amadix_newA_gun_d2;
										break;
									}
									
								break;
								
								case item.sawedoff:
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											arms_index = spr_amadix_newA_sawedoff_d;
											arms2_index = spr_amadix_newA_sawedoff_d2;
										break;
										case gunState.shooting:
											arms_index = spr_amadix_newA_sawedoff_d_shoot;
											arms2_index = spr_amadix_newA_sawedoff_d2_shoot;
										break;
										case gunState.reloading:
											arms_index = spr_amadix_newA_sawedoff_d_reload;
										case gunState.reloading_empty:
											arms_index = spr_amadix_newA_sawedoff_d_reload;
										break;
										case gunState.empty:
											arms_index = spr_amadix_newA_sawedoff_d;
											arms2_index = spr_amadix_newA_sawedoff_d2;
										break;
									}
									
								break;
								
							}
						}
						
					}else{
						
						if (instance_exists(obj_gun_logic)){
							switch(itemeaten){
								case item.m1911:
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											arms_index = spr_amadix_newA_gun_r;
										break;
										case gunState.shooting:
											arms_index = spr_amadix_newA_gun_r_shoot;
										break;
										case gunState.reloading:
											arms_index = spr_amadix_newA_gun_r_reload;
										case gunState.reloading_empty:
											arms_index = spr_amadix_newA_gun_r_reload;
										break;
										case gunState.empty:
											arms_index = spr_amadix_newA_gun_r;
										break;
									}
									
								break;
								
								case item.sawedoff:
									
									switch(obj_gun_logic.state){
										case gunState.standby:
											arms_index = spr_amadix_newA_sawedoff_r;
										break;
										case gunState.shooting:
											arms_index = spr_amadix_newA_sawedoff_r_shoot;
										break;
										case gunState.reloading:
											arms_index = spr_amadix_newA_sawedoff_r_reload;
										case gunState.reloading_empty:
											arms_index = spr_amadix_newA_sawedoff_r_reload;
										break;
										case gunState.empty:
											arms_index = spr_amadix_newA_sawedoff_r;
										break;
									}
									
								break;
							}
						}
					}
					
				break;
				//--------------------------------------------------------------
				
				//none----------------------------------------------------------
				case player_state_action.none:
					switch(state){
						//idle-----------------------------------------------------------
						case player_state.idle:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_newTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_newTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_newTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_newTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//moving--------------------------------------------------------
						case player_state.moving:
								switch(facing){
									case index_facing.down:
										if (!running){
											torso_index = spr_amadix_newTC_d;
										}else{
											torso_index = spr_amadix_newTC_run_d;
										}
									break;
									case index_facing.left:
										if (!running){
											torso_index = spr_amadix_newTC_l;
										}else{
											torso_index = spr_amadix_newTC_run_l;
										}
									break;
									case index_facing.right:
										if (!running){
											torso_index = spr_amadix_newTC_r;
										}else{
											torso_index = spr_amadix_newTC_run_r;
										}
									break;
									case index_facing.up:
										if (!running){
											torso_index = spr_amadix_newTC_u;
										}else{
											torso_index = spr_amadix_newTC_run_u;
										}
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading--------------------------------------------------------
						case player_state.wading:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_newTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_newTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_newTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_newTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading.idle---------------------------------------------------
						case player_state.wading_idle:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_newTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_newTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_newTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_newTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming------------------------------------------------------
						case player_state.swimming:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_newTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_newTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_newTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_newTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming.idle-------------------------------------------------
						case player_state.swimming_idle:
								switch(facing){
									case index_facing.down:
										torso_index = spr_amadix_newTC_d;
									break;
									case index_facing.left:
										torso_index = spr_amadix_newTC_l;
									break;
									case index_facing.right:
										torso_index = spr_amadix_newTC_r;
									break;
									case index_facing.up:
										torso_index = spr_amadix_newTC_u;
									break;
								}
						break;
						//--------------------------------------------------------------
					}
				break;
				//--------------------------------------------------------------
				
			}
	
	break;
}
switch(global.playerLegs){
	case item.none:
			switch(actionstate){
				//eating--------------------------------------------------------
				case player_state_action.eating:
					legs_index = spr_amadix_pantsL_d;
				break;
				//--------------------------------------------------------------
				
				//drinking------------------------------------------------------
				case player_state_action.drinking:
					legs_index = spr_amadix_pantsL_d;
				break;
				//--------------------------------------------------------------
				
				//attacking-----------------------------------------------------
				case player_state_action.attacking_melee:
					switch(facing){
						case index_facing.down:
							legs_index = spr_amadix_pantsL_attack_d;
						break;
						case index_facing.left:
							legs_index = spr_amadix_pantsL_attack_l;
						break;
						case index_facing.right:
							legs_index = spr_amadix_pantsL_attack_r;
						break;
						case index_facing.up:
							legs_index = spr_amadix_pantsL_attack_u;
						break;
					}
				break;
				//--------------------------------------------------------------
				
				//none----------------------------------------------------------
				case player_state_action.none:
					switch(state){
						//idle-----------------------------------------------------------
						case player_state.idle:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_pantsL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_pantsL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_pantsL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_pantsL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//moving--------------------------------------------------------
						case player_state.moving:
								switch(facing){
									case index_facing.down:
										if (!running){
											legs_index = spr_amadix_pantsL_d;
										}else{
											legs_index = spr_amadix_pantsL_run_d;
										}
									break;
									case index_facing.left:
										if (!running){
											legs_index = spr_amadix_pantsL_l;
										}else{
											legs_index = spr_amadix_pantsL_run_l;
										}
									break;
									case index_facing.right:
										if (!running){
											legs_index = spr_amadix_pantsL_r;
										}else{
											legs_index = spr_amadix_pantsL_run_r;
										}
									break;
									case index_facing.up:
										if (!running){
											legs_index = spr_amadix_pantsL_u;
										}else{
											legs_index = spr_amadix_pantsL_run_u;
										}
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading--------------------------------------------------------
						case player_state.wading:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_pantsL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_pantsL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_pantsL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_pantsL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading.idle---------------------------------------------------
						case player_state.wading_idle:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_pantsL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_pantsL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_pantsL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_pantsL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming------------------------------------------------------
						case player_state.swimming:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_pantsL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_pantsL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_pantsL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_pantsL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming.idle-------------------------------------------------
						case player_state.swimming_idle:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_pantsL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_pantsL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_pantsL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_pantsL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
					}
				break;
				//--------------------------------------------------------------
				
			}
	break;
	case item.jeans:
			switch(actionstate){
				//eating--------------------------------------------------------
				case player_state_action.eating:
					legs_index = spr_amadix_jeansL_d;
				break;
				//--------------------------------------------------------------
				
				//drinking------------------------------------------------------
				case player_state_action.drinking:
					legs_index = spr_amadix_jeansL_d;
				break;
				//--------------------------------------------------------------
				
				//attacking-----------------------------------------------------
				case player_state_action.attacking_melee:
					switch(facing){
						case index_facing.down:
							legs_index = spr_amadix_jeansL_attack_d;
						break;
						case index_facing.left:
							legs_index = spr_amadix_jeansL_attack_l;
						break;
						case index_facing.right:
							legs_index = spr_amadix_jeansL_attack_r;
						break;
						case index_facing.up:
							legs_index = spr_amadix_jeansL_attack_u;
						break;
					}
				break;
				//--------------------------------------------------------------
				
				//handgun-----------------------------------------------------
				case player_state_action.handgun:
					switch(facing){
						case index_facing.down:
							legs_index = spr_amadix_jeansL_gun_d;
						break;
						case index_facing.left:
							legs_index = spr_amadix_jeansL_gun_l;
						break;
						case index_facing.right:
							legs_index = spr_amadix_jeansL_gun_r;
						break;
						case index_facing.up:
							legs_index = spr_amadix_jeansL_gun_u;
						break;
					}
				break;
				//--------------------------------------------------------------
				
				//none----------------------------------------------------------
				case player_state_action.none:
					switch(state){
						//idle-----------------------------------------------------------
						case player_state.idle:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_jeansL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_jeansL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_jeansL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_jeansL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//moving--------------------------------------------------------
						case player_state.moving:
								switch(facing){
									case index_facing.down:
										if (!running){
											legs_index = spr_amadix_jeansL_d;
										}else{
											legs_index = spr_amadix_jeansL_run_d;
										}
									break;
									case index_facing.left:
										if (!running){
											legs_index = spr_amadix_jeansL_l;
										}else{
											legs_index = spr_amadix_jeansL_run_l;
										}
									break;
									case index_facing.right:
										if (!running){
											legs_index = spr_amadix_jeansL_r;
										}else{
											legs_index = spr_amadix_jeansL_run_r;
										}
									break;
									case index_facing.up:
										if (!running){
											legs_index = spr_amadix_jeansL_u;
										}else{
											legs_index = spr_amadix_jeansL_run_u;
										}
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading--------------------------------------------------------
						case player_state.wading:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_jeansL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_jeansL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_jeansL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_jeansL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading.idle---------------------------------------------------
						case player_state.wading_idle:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_jeansL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_jeansL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_jeansL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_jeansL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming------------------------------------------------------
						case player_state.swimming:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_jeansL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_jeansL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_jeansL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_jeansL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming.idle-------------------------------------------------
						case player_state.swimming_idle:
								switch(facing){
									case index_facing.down:
										legs_index = spr_amadix_jeansL_d;
									break;
									case index_facing.left:
										legs_index = spr_amadix_jeansL_l;
									break;
									case index_facing.right:
										legs_index = spr_amadix_jeansL_r;
									break;
									case index_facing.up:
										legs_index = spr_amadix_jeansL_u;
									break;
								}
						break;
						//--------------------------------------------------------------
					}
				break;
				//--------------------------------------------------------------
				
			}
	break;
}
switch(global.playerBoots){
	case item.none:
			switch(actionstate){
				//eating--------------------------------------------------------
				case player_state_action.eating:
					boots_index = spr_amadix_feetB_d;
				break;
				//--------------------------------------------------------------
				
				//drinking------------------------------------------------------
				case player_state_action.drinking:
					boots_index = spr_amadix_feetB_d;
				break;
				//--------------------------------------------------------------
				
				//attacking-----------------------------------------------------
				case player_state_action.attacking_melee:
					switch(facing){
						case index_facing.down:
							boots_index = spr_amadix_feetB_attack_d;
						break;
						case index_facing.left:
							boots_index = spr_amadix_feetB_attack_l;
						break;
						case index_facing.right:
							boots_index = spr_amadix_feetB_attack_r;
						break;
						case index_facing.up:
							boots_index = spr_amadix_feetB_attack_u;
						break;
					}
				break;
				//--------------------------------------------------------------
				
				//none----------------------------------------------------------
				case player_state_action.none:
					switch(state){
						//idle-----------------------------------------------------------
						case player_state.idle:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_feetB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_feetB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_feetB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_feetB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//moving--------------------------------------------------------
						case player_state.moving:
								switch(facing){
									case index_facing.down:
										if (!running){
											boots_index = spr_amadix_feetB_d;
										}else{
											boots_index = spr_amadix_feetB_run_d;
										}
									break;
									case index_facing.left:
										if (!running){
											boots_index = spr_amadix_feetB_l;
										}else{
											boots_index = spr_amadix_feetB_run_l;
										}
									break;
									case index_facing.right:
										if (!running){
											boots_index = spr_amadix_feetB_r;
										}else{
											boots_index = spr_amadix_feetB_run_r;
										}
									break;
									case index_facing.up:
										if (!running){
											boots_index = spr_amadix_feetB_u;
										}else{
											boots_index = spr_amadix_feetB_run_u;
										}
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading--------------------------------------------------------
						case player_state.wading:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_feetB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_feetB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_feetB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_feetB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading.idle---------------------------------------------------
						case player_state.wading_idle:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_feetB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_feetB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_feetB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_feetB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming------------------------------------------------------
						case player_state.swimming:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_feetB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_feetB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_feetB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_feetB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming.idle-------------------------------------------------
						case player_state.swimming_idle:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_feetB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_feetB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_feetB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_feetB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
					}
				break;
				//--------------------------------------------------------------
				
			}
	break;
	case item.sneakers:
			switch(actionstate){
				//eating--------------------------------------------------------
				case player_state_action.eating:
					boots_index = spr_amadix_newB_d;
				break;
				//--------------------------------------------------------------
				
				//drinking------------------------------------------------------
				case player_state_action.drinking:
					boots_index = spr_amadix_newB_d;
				break;
				//--------------------------------------------------------------
				
				//attacking-----------------------------------------------------
				case player_state_action.attacking_melee:
					switch(facing){
						case index_facing.down:
							boots_index = spr_amadix_newB_attack_d;
						break;
						case index_facing.left:
							boots_index = spr_amadix_newB_attack_l;
						break;
						case index_facing.right:
							boots_index = spr_amadix_newB_attack_r;
						break;
						case index_facing.up:
							boots_index = spr_amadix_newB_attack_u;
						break;
					}
				break;
				//--------------------------------------------------------------
				
				//attacking-----------------------------------------------------
				case player_state_action.handgun:
					switch(facing){
						case index_facing.down:
							boots_index = spr_amadix_newB_gun_d;
						break;
						case index_facing.left:
							boots_index = spr_amadix_newB_gun_l;
						break;
						case index_facing.right:
							boots_index = spr_amadix_newB_gun_r;
						break;
						case index_facing.up:
							boots_index = spr_amadix_newB_gun_u;
						break;
					}
				break;
				//--------------------------------------------------------------
				
				//none----------------------------------------------------------
				case player_state_action.none:
					switch(state){
						//idle-----------------------------------------------------------
						case player_state.idle:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_newB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_newB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_newB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_newB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//moving--------------------------------------------------------
						case player_state.moving:
								switch(facing){
									case index_facing.down:
										if (!running){
											boots_index = spr_amadix_newB_d;
										}else{
											boots_index = spr_amadix_newB_run_d;
										}
									break;
									case index_facing.left:
										if (!running){
											boots_index = spr_amadix_newB_l;
										}else{
											boots_index = spr_amadix_newB_run_l;
										}
									break;
									case index_facing.right:
										if (!running){
											boots_index = spr_amadix_newB_r;
										}else{
											boots_index = spr_amadix_newB_run_r;
										}
									break;
									case index_facing.up:
										if (!running){
											boots_index = spr_amadix_newB_u;
										}else{
											boots_index = spr_amadix_newB_run_u;
										}
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading--------------------------------------------------------
						case player_state.wading:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_newB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_newB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_newB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_newB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//wading.idle---------------------------------------------------
						case player_state.wading_idle:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_newB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_newB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_newB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_newB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming------------------------------------------------------
						case player_state.swimming:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_newB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_newB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_newB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_newB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
						//swimming.idle-------------------------------------------------
						case player_state.swimming_idle:
								switch(facing){
									case index_facing.down:
										boots_index = spr_amadix_newB_d;
									break;
									case index_facing.left:
										boots_index = spr_amadix_newB_l;
									break;
									case index_facing.right:
										boots_index = spr_amadix_newB_r;
									break;
									case index_facing.up:
										boots_index = spr_amadix_newB_u;
									break;
								}
						break;
						//--------------------------------------------------------------
					}
				break;
				//--------------------------------------------------------------
				
			}
	break;
}


}

